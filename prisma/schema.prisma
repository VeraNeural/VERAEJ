generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model chat_messages {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  session_id    String?        @db.Uuid
  user_id       String?        @db.Uuid
  role          String         @db.VarChar(50)
  content       String
  audio_url     String?
  created_at    DateTime?      @default(now()) @db.Timestamp(6)
  chat_sessions chat_sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users?         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([session_id], map: "idx_chat_messages_session_id")
}

model chat_sessions {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                String?                  @db.Uuid
  title                  String?                  @default("New conversation") @db.VarChar(255)
  message_count          Int?                     @default(0)
  created_at             DateTime?                @default(now()) @db.Timestamp(6)
  updated_at             DateTime?                @default(now()) @db.Timestamp(6)
  messages               Json?
  chat_messages          chat_messages[]
  users                  users?                   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  messages               messages[]
  user_journal_responses user_journal_responses[]

  @@index([user_id], map: "idx_chat_sessions_user_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model check_ins {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  mood       Int
  energy     Int
  stress     Int
  sleep      Int
  note       String?
  timestamp  DateTime? @default(now()) @db.Timestamp(6)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([timestamp], map: "idx_check_ins_timestamp")
  @@index([user_id], map: "idx_check_ins_user")
}

model coaching_sessions {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                String                 @db.VarChar(255)
  description          String?
  coach_id             String                 @db.Uuid
  session_type         String                 @db.VarChar(50)
  status               String?                @default("scheduled") @db.VarChar(50)
  scheduled_at         DateTime?              @db.Timestamp(6)
  duration_minutes     Int?                   @default(60)
  max_participants     Int?
  meeting_link         String?
  notes                String?
  created_at           DateTime?              @default(now()) @db.Timestamp(6)
  updated_at           DateTime?              @default(now()) @db.Timestamp(6)
  users                users                  @relation(fields: [coach_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  session_messages     session_messages[]
  session_participants session_participants[]

  @@index([coach_id], map: "idx_coaching_sessions_coach")
}

model community_channels {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String            @db.VarChar(100)
  slug            String            @unique @db.VarChar(100)
  description     String?
  channel_type    String?           @default("public") @db.VarChar(50)
  required_tier   String?           @db.VarChar(50)
  icon            String?           @db.VarChar(50)
  position        Int?              @default(0)
  created_by      String?           @db.Uuid
  created_at      DateTime?         @default(now()) @db.Timestamp(6)
  updated_at      DateTime?         @default(now()) @db.Timestamp(6)
  users           users?            @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  community_polls community_polls[]
  community_posts community_posts[]

  @@index([slug], map: "idx_community_channels_slug")
}

model community_events {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title            String        @db.VarChar(255)
  description      String?
  host_id          String        @db.Uuid
  event_type       String        @db.VarChar(50)
  scheduled_at     DateTime      @db.Timestamp(6)
  duration_minutes Int?          @default(60)
  max_attendees    Int?
  meeting_link     String?
  recording_url    String?
  status           String?       @default("upcoming") @db.VarChar(50)
  required_tier    String?       @db.VarChar(50)
  created_at       DateTime?     @default(now()) @db.Timestamp(6)
  updated_at       DateTime?     @default(now()) @db.Timestamp(6)
  users            users         @relation(fields: [host_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  event_rsvps      event_rsvps[]

  @@index([scheduled_at], map: "idx_community_events_scheduled")
}

model community_polls {
  id                 String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  channel_id         String             @db.Uuid
  created_by         String             @db.Uuid
  question           String
  options            Json
  expires_at         DateTime?          @db.Timestamp(6)
  created_at         DateTime?          @default(now()) @db.Timestamp(6)
  community_channels community_channels @relation(fields: [channel_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users              users              @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  poll_votes         poll_votes[]

  @@index([channel_id], map: "idx_community_polls_channel")
}

model community_posts {
  id                    String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  channel_id            String             @db.Uuid
  user_id               String             @db.Uuid
  content               String
  is_pinned             Boolean?           @default(false)
  is_announcement       Boolean?           @default(false)
  reply_to_id           String?            @db.Uuid
  attachments           Json?
  created_at            DateTime?          @default(now()) @db.Timestamp(6)
  updated_at            DateTime?          @default(now()) @db.Timestamp(6)
  post_type             String?            @default("text") @db.VarChar(50)
  community_channels    community_channels @relation(fields: [channel_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  community_posts       community_posts?   @relation("community_postsTocommunity_posts", fields: [reply_to_id], references: [id], onUpdate: NoAction)
  other_community_posts community_posts[]  @relation("community_postsTocommunity_posts")
  users                 users              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  polls                 polls[]
  post_comments         post_comments[]
  post_reactions        post_reactions[]

  @@index([channel_id], map: "idx_community_posts_channel")
  @@index([created_at(sort: Desc)], map: "idx_community_posts_created")
  @@index([user_id], map: "idx_community_posts_user")
}

model community_resources {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title          String    @db.VarChar(255)
  description    String?
  resource_type  String    @db.VarChar(50)
  file_url       String?
  thumbnail_url  String?
  category       String?   @db.VarChar(100)
  required_tier  String?   @db.VarChar(50)
  download_count Int?      @default(0)
  uploaded_by    String?   @db.Uuid
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @default(now()) @db.Timestamp(6)
  users          users?    @relation(fields: [uploaded_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model daily_check_ins_simple {
  id         String    @id @db.Uuid
  user_id    String?   @db.Uuid
  date       DateTime  @db.Date
  state      String    @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([user_id, date(sort: Desc)], map: "idx_daily_check_ins_user_date")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model daily_checkins {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.VarChar(255)
  mood       Int
  energy     Int
  stress     Int
  sleep      Int
  note       String?
  created_at DateTime? @default(now()) @db.Timestamp(6)

  @@index([user_id, created_at(sort: Desc)], map: "idx_daily_checkins_user_date")
}

model daily_rituals {
  id                   String    @id @db.Uuid
  user_id              String?   @db.Uuid
  date                 DateTime  @db.Date
  nervous_system_state String?   @db.VarChar(50)
  ritual_text          String
  ritual_type          String?   @db.VarChar(50)
  completed            Boolean?  @default(false)
  completed_at         DateTime? @db.Timestamp(6)
  reflection           String?
  created_at           DateTime? @default(now()) @db.Timestamp(6)
  users                users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([user_id, date(sort: Desc)], map: "idx_daily_rituals_user_date")
}

model direct_messages {
  id                                        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  conversation_id                           String    @db.Uuid
  sender_id                                 String    @db.Uuid
  recipient_id                              String    @db.Uuid
  content                                   String
  is_read                                   Boolean?  @default(false)
  attachments                               Json?
  created_at                                DateTime? @default(now()) @db.Timestamp(6)
  users_direct_messages_recipient_idTousers users     @relation("direct_messages_recipient_idTousers", fields: [recipient_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_direct_messages_sender_idTousers    users     @relation("direct_messages_sender_idTousers", fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([conversation_id], map: "idx_direct_messages_conversation")
}

model event_rsvps {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  event_id         String           @db.Uuid
  user_id          String           @db.Uuid
  status           String?          @default("registered") @db.VarChar(50)
  created_at       DateTime?        @default(now()) @db.Timestamp(6)
  community_events community_events @relation(fields: [event_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users            users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([event_id, user_id])
}

model files {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String    @db.Uuid
  name        String    @db.VarChar(255)
  size        Int
  type        String    @db.VarChar(100)
  url         String
  uploaded_at DateTime? @default(now()) @db.Timestamp(6)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_files_user")
}

model journal_entries {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  prompt_id  String?   @db.Uuid
  response   String
  timestamp  DateTime? @default(now()) @db.Timestamp(6)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([prompt_id], map: "idx_journal_entries_prompt")
  @@index([user_id], map: "idx_journal_entries_user")
}

model journal_prompts {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  prompt_text            String
  category               String?                  @db.VarChar(50)
  created_at             DateTime?                @default(now()) @db.Timestamp(6)
  user_journal_responses user_journal_responses[]
}

model messages {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String?        @db.Uuid
  session_id    String?        @db.Uuid
  role          String         @db.VarChar(50)
  content       String
  created_at    DateTime?      @default(now()) @db.Timestamp(6)
  chat_sessions chat_sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users?         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_messages_user_id")
}

model password_reset_tokens {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  token      String    @unique @db.VarChar(255)
  expires_at DateTime  @db.Timestamp(6)
  used       Boolean?  @default(false)
  used_at    DateTime? @db.Timestamp(6)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([expires_at], map: "idx_reset_tokens_expires")
  @@index([token], map: "idx_reset_tokens_token")
  @@index([user_id], map: "idx_reset_tokens_user")
}

model poll_votes {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  poll_id         String          @db.Uuid
  user_id         String          @db.Uuid
  option_id       String          @db.VarChar(50)
  created_at      DateTime?       @default(now()) @db.Timestamp(6)
  community_polls community_polls @relation(fields: [poll_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([poll_id, user_id])
  @@index([poll_id], map: "idx_poll_votes_poll")
  @@index([user_id], map: "idx_poll_votes_user")
}

model polls {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  post_id         String          @db.Uuid
  question        String
  options         Json
  closes_at       DateTime?       @db.Timestamp(6)
  created_at      DateTime?       @default(now()) @db.Timestamp(6)
  community_posts community_posts @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([post_id], map: "idx_polls_post")
}

model post_comments {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  post_id         String          @db.Uuid
  user_id         String          @db.Uuid
  content         String
  created_at      DateTime?       @default(now()) @db.Timestamp(6)
  updated_at      DateTime?       @default(now()) @db.Timestamp(6)
  community_posts community_posts @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at], map: "idx_comments_created")
  @@index([post_id], map: "idx_comments_post")
  @@index([user_id], map: "idx_comments_user")
}

model post_reactions {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  post_id         String          @db.Uuid
  user_id         String          @db.Uuid
  reaction_type   String          @db.VarChar(50)
  created_at      DateTime?       @default(now()) @db.Timestamp(6)
  community_posts community_posts @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([post_id, user_id, reaction_type])
  @@index([post_id], map: "idx_post_reactions_post")
}

model protocol_completions {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  protocol_id  String    @db.Uuid
  user_id      String    @db.Uuid
  completed_at DateTime? @default(now()) @db.Timestamp(6)
  notes        String?
  protocols    protocols @relation(fields: [protocol_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([protocol_id, completed_at(sort: Desc)], map: "idx_protocol_completions_protocol")
  @@index([user_id, completed_at(sort: Desc)], map: "idx_protocol_completions_user")
}

model protocol_items {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String    @db.Uuid
  title            String    @db.VarChar(255)
  description      String?
  category         String    @db.VarChar(100)
  frequency        String?   @default("daily") @db.VarChar(50)
  is_active        Boolean?  @default(true)
  completion_count Int?      @default(0)
  last_completed   DateTime? @db.Timestamp(6)
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @db.Timestamp(6)
  users            users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([category], map: "idx_protocol_items_category")
  @@index([user_id], map: "idx_protocol_items_user")
}

model protocols {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id              String                 @db.Uuid
  title                String                 @db.VarChar(255)
  description          String?
  category             String?                @db.VarChar(100)
  frequency            String?                @db.VarChar(50)
  is_active            Boolean?               @default(true)
  created_at           DateTime?              @default(now()) @db.Timestamp(6)
  updated_at           DateTime?              @default(now()) @db.Timestamp(6)
  protocol_completions protocol_completions[]

  @@index([user_id, created_at(sort: Desc)], map: "idx_protocols_user")
}

model ritual_library {
  id          String    @id @db.Uuid
  title       String?   @db.VarChar(255)
  description String?
  ritual_text String?
  ritual_type String?   @db.VarChar(50)
  state_match String?   @db.VarChar(50)
  created_by  String?   @db.Uuid
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  users       users?    @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([state_match], map: "idx_ritual_library_state")
}

model session_messages {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  session_id        String            @db.Uuid
  user_id           String            @db.Uuid
  content           String
  message_type      String?           @default("message") @db.VarChar(50)
  created_at        DateTime?         @default(now()) @db.Timestamp(6)
  coaching_sessions coaching_sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users             users             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model session_participants {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  session_id        String            @db.Uuid
  user_id           String            @db.Uuid
  status            String?           @default("invited") @db.VarChar(50)
  joined_at         DateTime?         @db.Timestamp(6)
  created_at        DateTime?         @default(now()) @db.Timestamp(6)
  coaching_sessions coaching_sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users             users             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([session_id, user_id])
  @@index([session_id], map: "idx_session_participants_session")
}

model test_users {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String    @db.VarChar(255)
  email               String    @unique @db.VarChar(255)
  password_hash       String    @db.VarChar(255)
  subscription_tier   String?   @default("integrator") @db.VarChar(50)
  subscription_status String?   @default("active") @db.VarChar(50)
  created_at          DateTime? @default(now()) @db.Timestamp(6)
}

model user_insights {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String?   @db.Uuid
  insight_type     String    @db.VarChar(100)
  content          String
  confidence_score Decimal?  @default(1.0) @db.Decimal(3, 2)
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @db.Timestamp(6)
  users            users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, insight_type, content])
}

model user_journal_responses {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String           @db.Uuid
  prompt_id       String?          @db.Uuid
  response_date   DateTime         @db.Date
  session_id      String?          @db.Uuid
  created_at      DateTime?        @default(now()) @db.Timestamp(6)
  journal_prompts journal_prompts? @relation(fields: [prompt_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  chat_sessions   chat_sessions?   @relation(fields: [session_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, response_date])
}

model user_roles {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  role       String    @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, role])
  @@index([user_id], map: "idx_user_roles_user")
}

model users {
  id                                                  String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                                String?                  @db.VarChar(255)
  email                                               String                   @unique @db.VarChar(255)
  password_hash                                       String                   @db.VarChar(255)
  subscription_status                                 String?                  @default("trial") @db.VarChar(50)
  subscription_tier                                   String?                  @default("free") @db.VarChar(50)
  trial_ends_at                                       DateTime?                @db.Timestamp(6)
  timezone                                            String?                  @default("America/New_York") @db.VarChar(100)
  notifications                                       Boolean?                 @default(true)
  email_updates                                       Boolean?                 @default(false)
  privacy_mode                                        Boolean?                 @default(false)
  is_admin                                            Boolean?                 @default(false)
  created_at                                          DateTime?                @default(now()) @db.Timestamp(6)
  updated_at                                          DateTime?                @default(now()) @db.Timestamp(6)
  password                                            String?                  @db.VarChar(255)
  orientation_completed                               Boolean?                 @default(false)
  orientation_data                                    Json?
  test_mode                                           Boolean?                 @default(false)
  stripe_customer_id                                  String?                  @db.VarChar(255)
  stripe_subscription_id                              String?                  @db.VarChar(255)
  chat_messages                                       chat_messages[]
  chat_sessions                                       chat_sessions[]
  check_ins                                           check_ins[]
  coaching_sessions                                   coaching_sessions[]
  community_channels                                  community_channels[]
  community_events                                    community_events[]
  community_polls                                     community_polls[]
  community_posts                                     community_posts[]
  community_resources                                 community_resources[]
  daily_check_ins_simple                              daily_check_ins_simple[]
  daily_rituals                                       daily_rituals[]
  direct_messages_direct_messages_recipient_idTousers direct_messages[]        @relation("direct_messages_recipient_idTousers")
  direct_messages_direct_messages_sender_idTousers    direct_messages[]        @relation("direct_messages_sender_idTousers")
  event_rsvps                                         event_rsvps[]
  files                                               files[]
  journal_entries                                     journal_entries[]
  messages                                            messages[]
  password_reset_tokens                               password_reset_tokens[]
  poll_votes                                          poll_votes[]
  post_comments                                       post_comments[]
  post_reactions                                      post_reactions[]
  protocol_items                                      protocol_items[]
  ritual_library                                      ritual_library[]
  session_messages                                    session_messages[]
  session_participants                                session_participants[]
  user_insights                                       user_insights[]
  user_roles                                          user_roles[]
  voice_usage                                         voice_usage[]

  @@index([email], map: "idx_users_email")
}

model voice_usage {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id, created_at], map: "idx_voice_usage_user_date")
}
